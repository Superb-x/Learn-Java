异常的分类：
	1.编译时期异常：checked异常，在编译时期，就会检查，如果没有处理异常会编译失败
	2.运行时期异常：runtime异常，在运行时期，检查异常，编译时期不会检查，在运行时才会检查
	
-------------------------------------------------
throw: 运用于方法内部，用于给调用者返回一个异常对象，和return一样会结束当前方法
throws: 运用于方法声明之上，用于表示当前方法不处理异常，而是提醒该方法的调用者来处理异常（抛出异常）例如：
		private static int devide(int num1, int num2) throws Exception {}
		
注意：如果每一个方法都放弃处理异常都直接通过throws声明抛出，最后异常会抛到main方法，如果此时main方法不处理，继续抛给JVM，
	   底层的处理机制就是打印异常的跟踪栈信息
	   
方法的覆盖（override）：
	一同：方法的签名必须相同
	两小：1、子类方法返回类型和父类方法返回类型相同，或者是其子类
		  2、 子类方法不能声明抛出新的异常
	一大：子类复写方法访问权限必须大于父类
	
自定义异常类：
	我们说了java中不同的异常类，分别表示着某一种具体的异常情况，那么在开发中总是有些异常情况是SUN公司没有定义好的，
	此时我们根据自己的业务的异常情况来定义异常类。

什么是异常类：在开发中根据自己业务的异常情况来定义异常类

异常类如何定义：
	方式1：自定义一个受检查的异常类：自定义类，并继承于java.lang.Exception
	方式2：自定义一个运行时期的异常类：自定义类，并继承于java.lang.RuntimeException	
	
异常转译	：当位于最上层的子系统不需要关心底层的异常细节时，常见的做法是㶡原始的异常，把它转换为一个新的不同类型的异常，再抛出异常
	 
	 根据上述例子：我的车抛锚了，我在catch中重新抛出了一个新的异常（LateException）给我的调用者（老板），我们不能把车的异常信息抛给老板看
	 因为老板不关心这些细节，只关心我是否迟到

异常链：把原始的异常包装为新的异常类，从而形成多个异常的有序排列，有助于查找生成异常的本根原因	 

java7的异常新特性
	Android用不到java7，支持的java5/6语法
	1、增强的throw
	2、多异常捕获
	3、自动资源关闭
	
处理异常的原则：
	1、异常只能用于非正常情况，try-catch的存在也会影响性能
	2、需要为异常提供说明文档，比如java doc，如果自定义了异常，或者某个方法抛出了异常，我们应该记录在文档注释中
	3、尽可能避免异常。如空指针异常
	4、异常的粒度很重要，应该为一个基本操作定一个try-catch块，不要为了简便，将几百行代码放到一个try-catch中
	5、不建议在循环中进行异常处理，应该在循环外对异常进行捕获处理		
	6、自定义异常尽量使用RuntimeException类型
		
	